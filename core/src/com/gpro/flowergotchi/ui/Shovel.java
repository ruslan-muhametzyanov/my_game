package com.gpro.flowergotchi.ui;import com.badlogic.gdx.audio.Sound;import com.badlogic.gdx.graphics.Color;import com.badlogic.gdx.graphics.Texture;import com.badlogic.gdx.graphics.g2d.Batch;import com.badlogic.gdx.math.Interpolation;import com.badlogic.gdx.math.Vector2;import com.badlogic.gdx.scenes.scene2d.Actor;import com.badlogic.gdx.scenes.scene2d.actions.Actions;import com.badlogic.gdx.scenes.scene2d.actions.AlphaAction;import com.badlogic.gdx.scenes.scene2d.actions.MoveToAction;import com.badlogic.gdx.scenes.scene2d.actions.RunnableAction;import com.gpro.flowergotchi.FlowergotchiGame;import com.gpro.flowergotchi.Preferences;import com.gpro.flowergotchi.gamelogic.ActorParameters;import com.gpro.flowergotchi.gamelogic.DrawOrderLevels;import com.gpro.flowergotchi.gamelogic.gamevar.IntGameVariables;import com.gpro.flowergotchi.gamelogic.gamevar.IntegerGameVar;import com.gpro.flowergotchi.util.Pair;import com.gpro.flowergotchi.util.Rand;public class Shovel extends Actor {    private static final float rotThreshold = 25.f;    private final GameUI ui;    private final FlowergotchiGame game;    private Texture shovel;    private boolean flip;    private Texture parts[];    private final Pair<Vector2, Vector2> insectZone;    private Sound dig1;    private Sound dig2;    private float prevRotation;    private float rot = 0;    public Shovel(final FlowergotchiGame game, final GameUI ui, Pair<Vector2, Vector2> potInsectZone) {        this.game = game;        this.ui = ui;        this.insectZone = potInsectZone;        this.prevRotation = 0;        this.setUserObject(new ActorParameters(new IntegerGameVar(IntGameVariables.Var_DrawLevel, (DrawOrderLevels.D_Shovel))));        initData();    }    public void prepareShovel(int stageNum) {        final Shovel s = this;        if (stageNum == 1) {            this.setPosition(insectZone.getSecond().x + this.getWidth(), insectZone.getSecond().y - 2 * this.getHeight());            AlphaAction alpha2 = new AlphaAction();            alpha2.setAlpha(1.0f);            alpha2.setDuration(0.5f);            MoveToAction move = new MoveToAction();            move.setPosition(insectZone.getSecond().x - 25, insectZone.getSecond().y - this.getHeight());            move.setDuration(0.35f);            move.setInterpolation(Interpolation.pow2Out);            this.addAction(Actions.sequence(alpha2, move));        } else {            this.clearActions();            MoveToAction move1 = new MoveToAction();            move1.setPosition(insectZone.getSecond().x + this.getWidth(), insectZone.getSecond().y - 2 * this.getHeight());            move1.setDuration(0.8f);            move1.setInterpolation(Interpolation.pow2In);            AlphaAction alpha3 = new AlphaAction();            alpha3.setAlpha(0.0f);            alpha3.setDuration(0.5f);            MoveToAction move2 = new MoveToAction();            move2.setPosition(insectZone.getFirst().x - this.getWidth() - 15, insectZone.getFirst().y - 2 * this.getHeight());            move2.setInterpolation(Interpolation.linear);            RunnableAction point2 = Actions.run(new Runnable() {                @Override                public void run() {                    flip = true;                    s.setRotation(0);                }            });            AlphaAction alpha5 = new AlphaAction();            alpha5.setAlpha(1.0f);            alpha5.setDuration(0.5f);            MoveToAction move22 = new MoveToAction();            move22.setPosition(insectZone.getFirst().x - 10, insectZone.getFirst().y - shovel.getHeight());            move22.setDuration(0.35f);            move22.setInterpolation(Interpolation.pow2Out);            this.addAction(Actions.sequence(move1, alpha3, point2, move2, alpha5, move22));        }    }    public void updateRotation(float newRot) {        this.setRotation(newRot);        this.rot += Math.abs(this.getRotation() - prevRotation);        if (this.rot < 0) {            this.rot = 0;        }        if (this.rot > rotThreshold) {            this.rot = 0;            if (Rand.randFloat(0, 1) > 0.5) {                dig1.play(1.0f * (Preferences.getVolume() ? 1.0f : 0.0f));            } else {                dig2.play(1.0f * (Preferences.getVolume() ? 1.0f : 0.0f));            }            for (int i = 0; i < 4; i++) {                GravityProjectile part = new GravityProjectile(parts[Rand.randInt(0, 4)], new Vector2(this.getX(), this.getY() + 170), 360, 0, 0.5f);                this.ui.getStage().addActor(part);            }        }        prevRotation = newRot;    }    private void initData() {        parts = new Texture[5];        for (int i = 1; i <= 5; ++i) {            parts[i - 1] = game.manager.getTexture("shovel/grpart" + i + ".png");        }        shovel = game.manager.getTexture("shovel/texshovel.png");        dig1 = ui.getGame().manager.get("shovel/dig1.ogg", Sound.class);        dig2 = ui.getGame().manager.get("shovel/dig2.ogg", Sound.class);        this.setSize(shovel.getWidth(), shovel.getHeight());        this.setColor(this.getColor().r, this.getColor().g, this.getColor().b, 0.0f);    }    @Override    public void draw(Batch batch, float parentAlpha) {        Color color = getColor();        batch.setColor(color.r, color.g, color.b, color.a * parentAlpha);        if (flip) {            batch.draw(shovel, this.getX(), this.getY(), 0, 0, shovel.getWidth(), shovel.getHeight(), this.getScaleX(), this.getScaleY(), this.getRotation(), 0, 0, shovel.getWidth(), shovel.getHeight(), true, true);        } else {            batch.draw(shovel, this.getX(), this.getY(), 0, 0, shovel.getWidth(), shovel.getHeight(), this.getScaleX(), this.getScaleY(), this.getRotation(), 0, 0, shovel.getWidth(), shovel.getHeight(), false, true);        }        batch.setColor(color.r, color.g, color.b, 1f);    }}