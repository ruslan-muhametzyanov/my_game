package com.gpro.flowergotchi.ui;import com.badlogic.gdx.graphics.Color;import com.badlogic.gdx.graphics.Texture;import com.badlogic.gdx.graphics.g2d.Batch;import com.badlogic.gdx.graphics.g2d.Sprite;import com.badlogic.gdx.graphics.g2d.TextureRegion;import com.badlogic.gdx.math.Interpolation;import com.badlogic.gdx.math.Vector2;import com.badlogic.gdx.scenes.scene2d.Actor;import com.badlogic.gdx.scenes.scene2d.actions.Actions;import com.badlogic.gdx.scenes.scene2d.actions.AlphaAction;import com.badlogic.gdx.scenes.scene2d.actions.MoveToAction;import com.badlogic.gdx.scenes.scene2d.actions.RemoveActorAction;import com.badlogic.gdx.scenes.scene2d.actions.RepeatAction;import com.badlogic.gdx.scenes.scene2d.actions.SequenceAction;import com.badlogic.gdx.scenes.scene2d.ui.Image;import com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable;import com.badlogic.gdx.utils.Align;import com.gpro.flowergotchi.gamelogic.ActorParameters;import com.gpro.flowergotchi.gamelogic.DrawOrderLevels;import com.gpro.flowergotchi.gamelogic.ResourceManager;import com.gpro.flowergotchi.gamelogic.gamevar.IntGameVariables;import com.gpro.flowergotchi.gamelogic.gamevar.IntegerGameVar;public class Smile extends Actor {    private static final float timeLength = 5.f;    final Texture texture;    private final GameUI UI;    private final Image cloud1;    private final Image cloud2;    private final Image cloud3;    private final Sprite smile;    private boolean first = false;    public Smile(GameUI ui, ResourceManager manager, Texture texture, Vector2 pos) {        this.UI = ui;        TextureRegion reg = new TextureRegion(manager.getTexture("bubble/cloud1.png"));        reg.flip(false, true);        cloud1 = new Image(new TextureRegionDrawable(reg));        reg = new TextureRegion(manager.getTexture("bubble/cloud2.png"));        reg.flip(false, true);        cloud2 = new Image(new TextureRegionDrawable(reg));        reg = new TextureRegion(manager.getTexture("bubble/cloud3.png"));        reg.flip(false, true);        cloud3 = new Image(new TextureRegionDrawable(reg));        Color color = ui.getStage().getBatch().getColor();        color.a = 0;        cloud1.setColor(color);        cloud2.setColor(color);        cloud3.setColor(color);        cloud1.setUserObject(new ActorParameters(new IntegerGameVar(IntGameVariables.Var_DrawLevel, (DrawOrderLevels.D_Cloud))));        cloud2.setUserObject(new ActorParameters(new IntegerGameVar(IntGameVariables.Var_DrawLevel, (DrawOrderLevels.D_Cloud))));        cloud3.setUserObject(new ActorParameters(new IntegerGameVar(IntGameVariables.Var_DrawLevel, (DrawOrderLevels.D_Cloud))));        cloud1.setPosition(pos.x - 40, pos.y);        cloud2.setPosition(cloud1.getX() + 30, cloud1.getY() - cloud2.getHeight() - 10);        cloud3.setPosition(cloud2.getX() + 10, cloud2.getY() - cloud3.getHeight() - 10);        cloud1.addAction(Actions.sequence(Actions.alpha(1.0f, 0.25f, Interpolation.pow2), Actions.delay(timeLength - 0.25f), Actions.alpha(0.0f, 0.5f), Actions.removeActor(cloud1)));        cloud2.addAction(Actions.sequence(Actions.alpha(1.0f, 0.5f, Interpolation.pow2), Actions.delay(timeLength - 0.5f), Actions.alpha(0.0f, 0.5f), Actions.removeActor(cloud2)));        cloud3.addAction(Actions.sequence(Actions.alpha(1.0f, 0.75f, Interpolation.pow2), Actions.delay(timeLength - 0.75f), Actions.alpha(0.0f, 0.5f), Actions.removeActor(cloud3)));        this.texture = texture;        this.setColor(color);        smile = new Sprite(texture);        smile.flip(false, true);        this.setUserObject(new ActorParameters(new IntegerGameVar(IntGameVariables.Var_DrawLevel, (DrawOrderLevels.D_Smile))));        this.setPosition(pos.x, cloud2.getY() - cloud3.getHeight() - 10, Align.center);        MoveToAction moveDown = new MoveToAction();        moveDown.setPosition(pos.x, cloud2.getY() - cloud3.getHeight() - 20);        moveDown.setDuration(0.5f);        moveDown.setInterpolation(Interpolation.pow2);        MoveToAction moveUp = new MoveToAction();        moveUp.setPosition(pos.x, cloud2.getY() - cloud3.getHeight() - 10);        moveUp.setDuration(0.5f);        moveUp.setInterpolation(Interpolation.pow2);        RemoveActorAction remove = new RemoveActorAction();        remove.setActor(this);        AlphaAction alphaAction = Actions.alpha(0, 0.7f);        alphaAction.setActor(this);        SequenceAction sequence = Actions.sequence(moveDown, moveUp);        RepeatAction repeatAction = Actions.repeat(RepeatAction.FOREVER, sequence);        SequenceAction sequenceAction = Actions.sequence(Actions.delay(0.8f),                Actions.parallel(Actions.alpha(1.0f, 0.4f), repeatAction, Actions.sequence(Actions.delay(timeLength - 1f), alphaAction, Actions.removeAction(repeatAction, this),                        Actions.run(new Runnable() {                            @Override                            public void run() {                                UI.requestChangeSmile(true);                            }                        }), remove)));        this.addAction(sequenceAction);    }    @Override    public void draw(Batch batch, float parentAlpha) {        Color color = getColor();        batch.setColor(color.r, color.g, color.b, color.a * parentAlpha);        smile.setAlpha(this.getColor().a);        batch.draw(smile, this.getX(), this.getY());        batch.setColor(color.r, color.g, color.b, 1f);    }    @Override    public void act(float delta) {        super.act(delta);        if (!first) {            UI.getStage().addActor(cloud1);            UI.getStage().addActor(cloud2);            UI.getStage().addActor(cloud3);            first = true;        }    }}